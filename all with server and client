this is board.py
import pygame

from const import *
from board_dim import BoardDim


class Board:

    def __init__(self, dims=None, linewidth=15, ultimate=False, max=False):
        self.squares = [[0, 0, 0] for row in range(DIM)]
        self.dims = dims

        if not dims:
            self.dims = BoardDim(WIDTH, 0, 0)

        self.linewidth = linewidth
        self.offset = self.dims.sqsize * 0.2
        self.radius = (self.dims.sqsize // 2) * 0.7
        self.max = max

        if ultimate:
            self.create_ultimate()

        self.active = True

    def __str__(self):
        s = ''
        for row in range(DIM):
            for col in range(DIM):
                sqr = self.squares[row][col]
                s += str(sqr)
        return s

    def create_ultimate(self):
        for row in range(DIM):
            for col in range(DIM):
                size = self.dims.sqsize
                xcor, ycor = self.dims.xcor + (col * self.dims.sqsize), self.dims.ycor + (row * self.dims.sqsize)
                dims = BoardDim(size=size, xcor=xcor, ycor=ycor)
                linewidth = self.linewidth - 7
                ultimate = self.max

                self.squares[row][col] = Board(dims=dims, linewidth=linewidth, ultimate=ultimate, max=False)

    def render(self, surface):
        for row in range(DIM):
            for col in range(DIM):
                sqr = self.squares[row][col]

                if isinstance(sqr, Board): sqr.render(surface)

        # vertical lines
        pygame.draw.line(surface, LINE_COLOR, (self.dims.xcor + self.dims.sqsize, self.dims.ycor),
                         (self.dims.xcor + self.dims.sqsize, self.dims.ycor + self.dims.size), self.linewidth)
        pygame.draw.line(surface, LINE_COLOR, (self.dims.xcor + self.dims.size - self.dims.sqsize, self.dims.ycor),
                         (self.dims.xcor + self.dims.size - self.dims.sqsize, self.dims.ycor + self.dims.size),
                         self.linewidth)

        # horizontal lines
        pygame.draw.line(surface, LINE_COLOR, (self.dims.xcor, self.dims.ycor + self.dims.sqsize),
                         (self.dims.xcor + self.dims.size, self.dims.ycor + self.dims.sqsize), self.linewidth)
        pygame.draw.line(surface, LINE_COLOR, (self.dims.xcor, self.dims.ycor + self.dims.size - self.dims.sqsize),
                         (self.dims.xcor + self.dims.size, self.dims.ycor + self.dims.size - self.dims.sqsize),
                         self.linewidth)
        pass

    def valid_sqr(self, xclick, yclick):

        row = yclick // self.dims.sqsize
        col = xclick // self.dims.sqsize

        if row > 2: row %= DIM
        if col > 2: col %= DIM

        sqr = self.squares[row][col]

        # base case
        if not isinstance(sqr, Board):
            return sqr == 0 and self.active

        # recursive step
        return sqr.valid_sqr(xclick, yclick)

    def mark_sqr(self, xclick, yclick, player):
        row = yclick // self.dims.sqsize
        col = xclick // self.dims.sqsize

        if row > 2: row %= DIM
        if col > 2: col %= DIM

        sqr = self.squares[row][col]

        print('marking -> (', row, col, ')')

        # base case
        if not isinstance(sqr, Board):
            self.squares[row][col] = player
            return

        # recursive step
        sqr.mark_sqr(xclick, yclick, player)

    def draw_fig(self, surface, xclick, yclick):
        row = yclick // self.dims.sqsize
        col = xclick // self.dims.sqsize

        if row > 2: row %= DIM
        if col > 2: col %= DIM

        sqr = self.squares[row][col]

        # base case
        if not isinstance(sqr, Board):

            # cross
            if sqr == 1:
                # desc line
                ipos = (self.dims.xcor + (col * self.dims.sqsize) + self.offset,
                        self.dims.ycor + (row * self.dims.sqsize) + self.offset)
                fpos = (self.dims.xcor + self.dims.sqsize * (1 + col) - self.offset,
                        self.dims.ycor + self.dims.sqsize * (1 + row) - self.offset)
                pygame.draw.line(surface, CROSS_COLOR, ipos, fpos, self.linewidth)

                # asc line
                ipos = (self.dims.xcor + (col * self.dims.sqsize) + self.offset,
                        self.dims.ycor + self.dims.sqsize * (1 + row) - self.offset)
                fpos = (self.dims.xcor + self.dims.sqsize * (1 + col) - self.offset,
                        self.dims.ycor + (row * self.dims.sqsize) + self.offset)
                pygame.draw.line(surface, CROSS_COLOR, ipos, fpos, self.linewidth)

            # circle
            elif sqr == 2:
                center = (self.dims.xcor + self.dims.sqsize * (0.5 + col),
                          self.dims.ycor + self.dims.sqsize * (0.5 + row))

                pygame.draw.circle(surface, CIRCLE_COLOR, center, self.radius, self.linewidth)

            return

        # recursive step
        sqr.draw_fig(surface, xclick, yclick)

    def manage_win(self, surface, winner, onmain=False):
        # transparent screen
        transparent = pygame.Surface((self.dims.size, self.dims.size))
        transparent.set_alpha(ALPHA)
        transparent.fill(FADE)
        if onmain:
            surface.blit(transparent, (self.dims.xcor, self.dims.ycor))
            surface.blit(transparent, (self.dims.xcor, self.dims.ycor))
        surface.blit(transparent, (self.dims.xcor, self.dims.ycor))

        # draw win
        if not onmain:
            # cross
            if winner == 1:
                # desc line
                ipos = (self.dims.xcor + self.offset,
                        self.dims.ycor + self.offset)
                fpos = (self.dims.xcor + self.dims.size - self.offset,
                        self.dims.ycor + self.dims.size - self.offset)
                pygame.draw.line(surface, CROSS_COLOR, ipos, fpos, self.linewidth + 7)

                # asc line
                ipos = (self.dims.xcor + self.offset,
                        self.dims.ycor + self.dims.size - self.offset)
                fpos = (self.dims.xcor + self.dims.size - self.offset,
                        self.dims.ycor + self.offset)
                pygame.draw.line(surface, CROSS_COLOR, ipos, fpos, self.linewidth + 7)

            # circle
            if winner == 2:
                center = (self.dims.xcor + self.dims.size * 0.5,
                          self.dims.ycor + self.dims.size * 0.5)

                pygame.draw.circle(surface, CIRCLE_COLOR, center, self.dims.size * 0.4, self.linewidth + 7)

        # inactive board
        self.active = False

    def check_draw_win(self, surface, ):

        isfull = True

        for row in range(DIM):
            for col in range(DIM):

                # base case sqr should have numbers
                sqr = self.squares[row][col]

                if isinstance(sqr, Board) and sqr.active:
                    # other board win
                    winner = sqr.check_draw_win(surface)
                    if winner:  # recursive step
                        self.squares[row][col] = winner
                        sqr.manage_win(surface, winner)

                # main
                # Â vertical wins
                for c in range(DIM):
                    if self.squares[0][c] == self.squares[1][c] == self.squares[2][c] != 0:
                        color = CROSS_COLOR if self.squares[0][c] == 1 else CIRCLE_COLOR
                        # draw win
                        ipos = (self.dims.xcor + self.dims.sqsize * (0.5 + c),
                                self.dims.ycor + self.offset)
                        fpos = (self.dims.xcor + self.dims.sqsize * (0.5 + c),
                                self.dims.ycor + self.dims.size - self.offset)
                        pygame.draw.line(surface, color, ipos, fpos, self.linewidth)

                        return self.squares[0][c]

                # horizontal wins
                for r in range(DIM):
                    if self.squares[r][0] == self.squares[r][1] == self.squares[r][2] != 0:
                        color = CROSS_COLOR if self.squares[r][0] == 1 else CIRCLE_COLOR
                        # draw win
                        ipos = (self.dims.xcor + self.offset,
                                self.dims.ycor + self.dims.sqsize * (r + 0.5))
                        fpos = (self.dims.xcor + self.dims.size - self.offset,
                                self.dims.ycor + self.dims.sqsize * (r + 0.5))
                        pygame.draw.line(surface, color, ipos, fpos, self.linewidth)

                        return self.squares[r][0]

                # diagonal wins
                # desc
                if self.squares[0][0] == self.squares[1][1] == self.squares[2][2] != 0:
                    color = CROSS_COLOR if self.squares[1][1] == 1 else CIRCLE_COLOR
                    # draw win
                    ipos = (self.dims.xcor + self.offset,
                            self.dims.ycor + self.offset)
                    fpos = (self.dims.xcor + self.dims.size - self.offset,
                            self.dims.ycor + self.dims.size - self.offset)
                    pygame.draw.line(surface, color, ipos, fpos, self.linewidth)

                    return self.squares[1][1]

                # asc
                if self.squares[2][0] == self.squares[1][1] == self.squares[0][2] != 0:
                    color = CROSS_COLOR if self.squares[1][1] == 1 else CIRCLE_COLOR
                    # draw win
                    ipos = (self.dims.xcor + self.offset,
                            self.dims.ycor + self.dims.size - self.offset)
                    fpos = (self.dims.xcor + self.dims.size - self.offset,
                            self.dims.ycor + self.offset)
                    pygame.draw.line(surface, color, ipos, fpos, self.linewidth)

                    return self.squares[1][1]




this is game.py
import pygame
from const import *
from board import Board
class Game:
    def __init__(self, ultimate=False, max=False):
        self.ultimate = ultimate
        self.max = max
        self.board = Board(ultimate=ultimate, max=max)
        self.player = 1
        self.playing = True
        pygame.font.init()
    def render_board(self, surface):
        self.board.render(surface)
    def next_turn(self):
        self.player = 2 if self.player == 1 else 1
    def ultimate_winner(self, surface, winner):
        print('ULTIMATE WINNER! ->', winner)
        if winner == 1:
            color = CROSS_COLOR
            # desc
            iDesc = (WIDTH // 2 - 110, HEIGHT // 2 - 110)
            fDesc = (WIDTH // 2 + 110, HEIGHT // 2 + 110)
            # asc
            iAsc = (WIDTH // 2 - 110, HEIGHT // 2 + 110)
            fAsc = (WIDTH // 2 + 110, HEIGHT // 2 - 110)
            # draw
            pygame.draw.line(surface, color, iDesc, fDesc, 22)
            pygame.draw.line(surface, color, iAsc, fAsc, 22)
        else:
            color = CIRCLE_COLOR
            # center
            center = (WIDTH // 2, HEIGHT // 2)
            pygame.draw.circle(surface, color, center, WIDTH // 4, 22)
        font = pygame.font.SysFont('monospace', 64)
        lbl = font.render('ULTIMATE WINNER!', 1, color)
        surface.blit(lbl, (WIDTH // 2 - lbl.get_rect().width // 2, HEIGHT // 2 + 220))
        self.playing = False
    def restart(self):
        self.__init__(self.ultimate, self.max)



this is board_dim.py
from const import *

class BoardDim:

    def __init__(self, size, xcor, ycor):
        self.size = size
        self.sqsize = size // DIM
        self.xcor = xcor
        self.ycor = ycor


this is const.py


WIDTH = 729 # 3^6
HEIGHT = 729

BG_COLOR = (28, 170, 156)  # Example color
LINE_COLOR = (23, 145, 135)
CROSS_COLOR = (66, 66, 66)
CIRCLE_COLOR = (239, 231, 200)
FADE = (28, 170, 156)

ALPHA = 100

DIM = 3


this is client.py
import socket
import pygame
import pickle  # For serializing game state
from const import *  # Import constants like WIDTH, HEIGHT, etc.
from game import Game  # Import your game logic
import threading  # Ensure threading is imported


class GameClient:
    def __init__(self, host='127.0.0.1', port=12345):
        pygame.init()  # Initialize Pygame
        self.server = (host, port)

        # Create and bind the client socket to avoid WinError 10022
        self.client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.client_socket.bind(('', 0))  # Bind to an available port on the client side

        self.game = Game(ultimate=True, max=True)  # Initialize the game
        self.player = None

        # Set up the Pygame window
        self.screen = pygame.display.set_mode((WIDTH, HEIGHT))
        pygame.display.set_caption('Tic Tac Toe')

    def send_move(self, move):
        # Serialize move data and send it to the server
        try:
            self.client_socket.sendto(pickle.dumps(move), self.server)
        except Exception as e:
            print(f"Error sending move: {e}")

    def receive_game_state(self):
        while True:
            try:
                data, _ = self.client_socket.recvfrom(1024)
                if data:
                    self.game = pickle.loads(data)  # Update game state with the received data
            except OSError as e:
                print(f"Error receiving game state: {e}")
                break

    def run(self):
        # Start the receiving thread
        threading.Thread(target=self.receive_game_state, daemon=True).start()

        # Your Pygame main loop
        while True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    return

                if event.type == pygame.MOUSEBUTTONDOWN:
                    xclick, yclick = event.pos
                    if self.game.board.valid_sqr(xclick, yclick):
                        move = (xclick, yclick, self.player)  # Prepare move data
                        self.send_move(move)

            # Clear screen
            self.screen.fill((255, 255, 255))

            # Render your game here using `self.game.render_board(self.screen)`
            self.game.render_board(self.screen)

            # Update display
            pygame.display.flip()


if __name__ == "__main__":
    client = GameClient()
    client.run()


this is server.py
import socket
import threading
import pickle
from game import Game  # Import the game logic


class GameServer:
    def __init__(self, host='127.0.0.1', port=12345):
        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.server_socket.bind((host, port))
        self.clients = []  # Store client addresses
        self.game = Game(ultimate=True, max=True)  # Initialize the game
        self.lock = threading.Lock()  # For handling moves safely
        print("Server is starting...")

    def handle_client(self, data, client_addr):
        with self.lock:  # Ensure safe modification of game state
            try:
                move = pickle.loads(data)  # Deserialize the client's move
                print(f"Move received from {client_addr}: {move}")

                # Validate the move and update the game state
                if self.game.board.valid_sqr(move[0], move[1]):
                    self.game.board.update_board(move[0], move[1], move[2])
                    print(f"Move applied to game board: {move}")

                # Send the updated game state to all clients
                self.broadcast_game_state()

            except Exception as e:
                print(f"Error processing move from {client_addr}: {e}")

    def broadcast_game_state(self):
        try:
            game_state = pickle.dumps(self.game)
            for client in self.clients:
                self.server_socket.sendto(game_state, client)
                print(f"Game state sent to {client}")
        except Exception as e:
            print(f"Error sending game state: {e}")

    def run(self):
        print("Waiting for players to connect...")
        while True:
            try:
                data, client_addr = self.server_socket.recvfrom(1024)
                if client_addr not in self.clients:
                    self.clients.append(client_addr)
                    print(f"New client connected: {client_addr}")
                    print(f"Current clients: {self.clients}")

                    # Ensure two clients are connected
                    if len(self.clients) == 2:
                        print("Both players are connected! Game is starting...")

                # Handle the move from the client
                self.handle_client(data, client_addr)

            except Exception as e:
                print(f"Error receiving data from client: {e}")


if __name__ == "__main__":
    server = GameServer()
    server.run()
